@using Orchard.ContentManagement;
@using Orchard.Core.Contents;
@using Orchard.Utility.Extensions;

@{
    Script.Require("ShapesBase");
    ContentItem contentItem = Model.ContentItem;
    var returnUrl = ViewContext.RequestContext.HttpContext.Request.ToUrlString();
    var hasPublished = contentItem.HasPublished();
    var hasDraft = contentItem.HasDraft();
    var isPublished = contentItem.IsPublished();
    var authorizedToEdit = Authorizer.Authorize(Permissions.EditContent, contentItem);
    var authorizedToDelete = Authorizer.Authorize(Permissions.DeleteContent, contentItem);
    var authorizedToPublish = Authorizer.Authorize(Permissions.PublishContent, contentItem);
}

<div class="item-action-links">
    <strong>@T("Item:")</strong>
    @if (hasPublished) {
        @Html.ItemDisplayLink(T("View").Text, contentItem);
    }
    @if (authorizedToEdit) {
        if (hasPublished) {
            @T(" | ")
        }
        @Html.ItemEditLink(T("Edit").Text, contentItem);
        @T(" | ")
        @Html.ActionLink(T(" Clone").Text, "Clone", "Admin", new { Id = contentItem.Id, ReturnUrl = Request.ToUrlString(), Area = "Contents" }, new { itemprop = "UnsafeUrl" });
    }

    @if (hasPublished && authorizedToPublish) {
        @T(" | ")
        @Html.ActionLink(T("Unpublish").Text, "Unpublish", "Admin", new { area = "Contents", id = contentItem.Id, returnUrl = Request.ToUrlString() }, new { itemprop = "UnsafeUrl" });
    }

    @if (authorizedToDelete) {
        @T(" | ")
        @Html.Link(T("Remove").Text, Url.ItemRemoveUrl(contentItem, new { returnUrl }), new { itemprop = "RemoveUrl UnsafeUrl" });
    }
</div>
@if ((!isPublished || hasDraft) && authorizedToEdit) {
    <div class="draft-action-links">
        <strong>@T("Draft:")</strong>
        @if (!isPublished && Authorizer.Authorize(Permissions.PreviewContent, contentItem)) {
            @Html.ActionLink(T("View").Text, "Display", "Item", new { area = "Contents", id = contentItem.Id, version = contentItem.Version }, new { });
        }

        @if (hasDraft && authorizedToPublish) {
            @T(" | ")
            @Html.ActionLink(T("Publish").Text, "Publish", "Admin", new { area = "Contents", id = contentItem.Id, returnUrl = Request.ToUrlString() }, new { itemprop = "UnsafeUrl" });
        }

        @if (!isPublished && hasPublished && authorizedToDelete) {
            @T(" | ")
            @Html.ActionLink(T("Discard").Text, "DiscardDraft", "Admin", new { area = "Contents", id = contentItem.Id, returnUrl = Request.ToUrlString() }, new { itemprop = "RemoveUrl UnsafeUrl" });
        }
    </div>
}